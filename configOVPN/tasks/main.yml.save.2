---

- block: #<----For_Debian_Based_System_Only---->


  - name: Install OVPN
    shell: >
       apt-get update;
       apt-get install -y  openvpn easy-rsa;       
          
    args:
      executable: /bin/bash
  

  - name: make-cadir
    shell: make-cadir  ~/openvpn-ca
    ignore_errors: yes

  - name: copy rsa files to our dir(if ubuntu>18_04)
    get_url: url=
    when: ansible_distribution_version>"18_04"


  - name: Config_RSA>
    shell: >
      ln -s openssl-1.0.0.cnf openssl.cnf;
    
    args:
      chdir: ~/openvpn-ca/
      executable: /bin/bash
    ignore_errors: yes   

  - name: Template vars
    template: src=vars.j2 dest=~/openvpn-ca/vars mode=0644
   


  - name:  Creates key && serverkey && clientkey 
    shell: >
      source vars;
      ./clean-all;
      yes "" | ./build-ca; 
      ./build-key-server --batch  server;
      yes "" | ./build-dh;
      openvpn --genkey --secret keys/ta.key;
      yes  "" | ./build-key --batch  client.{{ ansible_hostname }};       

    args:
      chdir: ~/openvpn-ca/
      executable: /bin/bash

  - name: Create test key for delete function
    shell: >
      source vars;
      yes "" | ./build-key --batch  test123;

    args:
      chdir: ~/openvpn-ca
      executable: /bin/bash
  
  - name: Copy key&sertificats to /etc/openvpn
    copy:
      remote_src: yes
      src: ~/openvpn-ca/keys/{{ item }}
      dest: /etc/openvpn
    loop: 
        - ca.crt
        - server.crt
        - server.key
        - ta.key
        - dh2048.pem


  - name: Copy server.conf template   
    template: src=server.j2 dest=/etc/openvpn/server.conf mode=0644

  - name: copy sysctl.conf
    template: src=sysctl.j2 dest=/etc/sysctl.conf mode=0644

  - name: Apply config
    shell: sysctl -p

  - name: Config Firewall for OVPN
    template: src=before.rules.j2 dest=/etc/ufw/before.rules mode=0644 

  - name: Cofig Firewall for packages to OVPN
    template: src=ufw.j2 dest=/etc/default/ufw mode=0640

  - name: Allowing ports for OVPN
    shell: >
       ufw allow {{ ovpn_port }}/{{ ovpn_proto }};
       ufw allow OpenSSH && ufw allow openvpn;       
       ufw disable

    args:
      executable: /bin/bash


  - name: Enable ufw
    shell: >
      ufw --force enable
  
    args:
      executable: /bin/bash

  - name: Start&enabling ovpn@server
    shell: >
       systemctl start openvpn@server;
       systemctl enable openvpn@server;

  - name: Creating infrastructure for clients
    shell: >
       mkdir -p ~/client-configs/files;
       chmod 700 ~/client-configs/files;
       
    args: 
      executable: /bin/bash
 

  - name: GetPublicIP
    ipify_facts:
       timeout: 60
   


  - name: Create base.conf from template
    template: src=base.conf.j2 dest=~/client-configs/base.conf mode=0644
     
  - name: CreateBashScriptToClients
    template: src=make_config.sh.j2 dest=~/client-configs/make_config.sh mode=700

  - name: Generete ClientKey
    shell: > 
      ./make_config.sh client.{{ ansible_hostname }};
      ./make_config.sh test123;

    args: 
      chdir: ~/client-configs/
      executable: /bin/bash


  - name: CopyKeyToHome
    shell: >
       cp client.{{ ansible_hostname }}.ovpn /home


    args:
      chdir: ~/client-configs/files
      executable: /bin/bash

  - name: GettingClientKeyToRemoteHost
    fetch:
      src: /home/client.{{ ansible_hostname }}.ovpn 
      dest: ClientKeys/ 
      mode: 700


  - name: RemoveOldCert
    ignore_errors: yes
    shell: >
      source vars && ./revoke-full test123
     
    args:
      chdir: ~/openvpn-ca/
      executable: /bin/bash
     

  - name: Copy crl.pem
    copy:
      remote_src: yes
      src: ~/openvpn-ca/keys/crl.pem
      dest: /etc/openvpn/
      

    notify:
        - Restart openvpn@server  


  when: ansible_os_family == "Debian"


- block: #<------For_RedHat_Based_Only-------->
  

  - name: Update yum
    shell: >
      yum update -y;

    args:
     executable: /bin/bash

  - name: Install EPEL to RedHat
    shell: >
      yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm;
      yum install -y epel-release;
   
    args:
      executable: /bin/bash      
    ignore_errors: yes

  - name: Install OVPN to RedHat
    shell: >
      yum install -y openvpn;
      yum install -y wget;

    args:
      executable: /bin/bash


  - name: Install iptables firewall
    shell: >
      yum install -y iptables-services;

    args:
      executable: /bin/bash


  - name: make-cadir
    shell: mkdir   /etc/openvpn/easy-rsa
    ignore_errors: yes

  - name: copy rsa files to our dir
    shell: >
      wget https://github.com/OpenVPN/easy-rsa-old/archive/2.3.3.tar.gz;
      tar xvfz 2.3.3.tar.gz;
      cp -rf /usr/local/src/easy-rsa-old-2.3.3/easy-rsa/2.0/* /etc/openvpn/easy-rsa;

    args:
      chdir: /usr/local/src/ 
      executable: /bin/bash    

  - name: copy easy-rsa to /etc
    shell: >
      cp  openssl-1.0.0.cnf openssl.cnf;

    args:
      chdir: /etc/openvpn/easy-rsa
      executable: /bin/bash

  - name: Copy vars 
    template: src=RHvars.j2 dest=/etc/openvpn/easy-rsa/vars mode=644



  - name:  Creates key && serverkey && clientkey
    shell: >
      source ./vars;
      ./clean-all;
      yes "" | ./build-ca;
      ./build-key-server --batch  server;
      yes "" |  ./build-dh;
      openvpn --genkey --secret keys/ta.key;
      yes  "" | ./build-key --batch  client.{{ ansible_hostname }};
 
    args:
      chdir: /etc/openvpn/easy-rsa
      executable: /bin/bash


  - name: Create test key for delete function
    shell: >
      source vars;
      yes "" | ./build-key --batch  test123;

    args:
      chdir: /etc/openvpn/easy-rsa
      executable: /bin/bash

   

  - name: Copy key&sertificats to /etc/openvpn
    copy:
      remote_src: yes
      src: /etc/openvpn/easy-rsa/keys/{{ item }}
      dest: /etc/openvpn/server
    loop:
        - ca.crt
        - server.crt
        - server.key
        - dh2048.pem
        - ta.key

  - name: Copy server.conf template
    template: src=RHserver.j2 dest=/etc/openvpn/server/server.conf  mode=0644 

  - name: copy sysctl.conf
    template: src=sysctl.j2 dest=/etc/sysctl.conf mode=0644

  - name: Apply config
    shell: sysctl -p

    args:
      executable: /bin/bash


  - name: Config Firewall for OVPN
    shell: >
      systemctl mask firewalld;
      systemctl enable iptables;
      systemctl stop firewalld;
      systemctl start iptables;
      iptables --flush;
      iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o {{ ansible_interface_for_firewall  }} -j MASQUERADE;
      iptables-save > /etc/sysconfig/iptables;
      service iptables restart;      

    args:
      executable: /bin/bash

  - name: Start&enabling ovpn@server
    shell: >
       systemctl start openvpn-server@server;
       systemctl enable openvpn-server@server;


  
  - name: Creating infrastructure for clients
    shell: >
       mkdir -p /etc/openvpn/client-configs;
       mkdir -p /etc/openvpn/client-configs/files;
       chmod 700 /etc/openvpn/client-configs/files;
       chmod 700 /etc/openvpn/client-configs;

    args:
      executable: /bin/bash


  - name: GetPublicIP
    ipify_facts:
       timeout: 60



  - name: Create base.conf from template
    template: src=base.conf.j2 dest=/etc/openvpn/client-configs/base.conf mode=644

  - name: Create ./make-sh from template
    template: src=RHmake_config.sh.j2 dest=/etc/openvpn/client-configs/make_config.sh mode=700

  - name: Generete ClientKey
    shell: >
      ./make_config.sh client.{{ ansible_hostname }};
      ./make_config.sh test123;

    args:
      chdir: /etc/openvpn/client-configs
      executable: /bin/bash


  - name: CopyKeyToHome
    shell: >
       cp client.{{ ansible_hostname }}.ovpn /home


    args:
      chdir: /etc/openvpn/client-configs/files
      executable: /bin/bash


  - name: GettingClientKeyToRemoteHost
    fetch:
      src: /home/client.{{ ansible_hostname }}.ovpn
      dest: ClientKeys/
      mode: 700


  - name: RemoveOldCert
    ignore_errors: yes
    shell: >
      source vars && ./revoke-full test123

    args:
      chdir: /etc/openvpn/easy-rsa/
      executable: /bin/bash


  - name: Copy crl.pem
    copy:
      remote_src: yes
      src: /etc/openvpn/easy-rsa/keys/crl.pem
      dest: /etc/openvpn/server/


    notify:
        - Restart openvpn@server_RedHat



  when: ansible_os_family == "RedHat"


- block: #<-----For_SUSE_Linux_Only------>

  - name: Install ovpn
    shell: >
      zypper in -y openvpn;

    args:
      executable: /bin/bash

  - name: make-cadir
    shell: mkdir   /etc/openvpn/easy-rsa
    ignore_errors: yes


  - name: Install easy-rsa
    shell: >
      wget https://github.com/OpenVPN/easy-rsa-old/archive/2.3.3.tar.gz;
      tar xvfz 2.3.3.tar.gz;
      cp -rf /usr/local/src/easy-rsa-old-2.3.3/easy-rsa/2.0/* /etc/openvpn/easy-rsa;

    args:
      chdir: /usr/local/src/
      executable: /bin/bash   

  - name: copy easy-rsa to /etc/ovpn
    shell: >
      cp  openssl-1.0.0.cnf openssl.cnf;

    args:
      chdir: /etc/openvpn/easy-rsa
      executable: /bin/bash



  - name: Install vars
    template: src=RHvars.j2 dest=/etc/openvpn/easy-rsa/vars mode=644

  - name:  Creates key && serverkey && clientkey
    shell: >
      source vars;
      ./clean-all;
      yes "" | ./build-ca;
      ./build-key-server --batch  server;
      yes "" |  ./build-dh;
      openvpn --genkey --secret keys/ta.key;
      yes  "" | ./build-key --batch  client.{{ ansible_hostname }};

    args:
      chdir: /etc/openvpn/easy-rsa/
      executable: /bin/bash

  - name: Create test key for delete function
    shell: >
      source vars;
      yes "" | ./build-key --batch  test123;

    args:
      chdir: /etc/openvpn/easy-rsa/
      executable: /bin/bash

  - name: Copy key&sertificats to /etc/openvpn
    copy:
      remote_src: yes
      src: /etc/openvpn/easy-rsa/keys/{{ item }}
      dest: /etc/openvpn/
    loop:
        - ca.crt
        - server.crt
        - server.key
        - dh2048.pem
        - ta.key

  - name: Copy server.conf template
    template: src=RHserver.j2 dest=/etc/openvpn/server.conf  mode=0644

  - name: copy sysctl.conf
    template: src=sysctl.j2 dest=/etc/sysctl.conf mode=0644

  - name: Apply config
    shell: sysctl -p

    args:
      executable: /bin/bash


  - name: Config Firewall for OVPN
    shell: >
      iptables --flush;
      iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o {{ ansible_interface_for_firewall  }} -j MASQUERADE;
      iptables-save > /etc/sysconfig/iptables;
  
    args:
     executable: /bin/bash

  - name: Creating infrastructure for clients
    shell: >
       mkdir -p /etc/openvpn/client-configs;
       mkdir -p /etc/openvpn/client-configs/files;
       chmod 700 /etc/openvpn/client-configs/files;
       chmod 700 /etc/openvpn/client-configs;

    args:
      executable: /bin/bash


  - name: Start&enabling ovpn@server
    shell: >
       systemctl start openvpn@server;
       systemctl enable openvpn@server;

    args:
      executable: /bin/bash


  - name: GetPublicIP
    ipify_facts:
       timeout: 60



  - name: Create base.conf from template
    template: src=base.conf.j2 dest=/etc/openvpn/client-configs/base.conf mode=644

  - name: Create ./make-sh from template
    template: src=RHmake_config.sh.j2 dest=/etc/openvpn/client-configs/make_config.sh mode=700

  - name: Generete ClientKey
    shell: >
      ./make_config.sh client.{{ ansible_hostname }};
      ./make_config.sh test123;

    args:
      chdir: /etc/openvpn/client-configs
      executable: /bin/bash


  - name: CopyKeyToHome
    shell: >
       cp client.{{ ansible_hostname }}.ovpn /home

    args:
      chdir: /etc/openvpn/client-configs/files
      executable: /bin/bash


  - name: GettingClientKeyToRemoteHost
    fetch:
      src: /home/client.{{ ansible_hostname }}.ovpn
      dest: ClientKeys/
      mode: 700


  - name: RemoveOldCert
    ignore_errors: yes
    shell: >
      source vars && ./revoke-full test123

    args:
      chdir: /etc/openvpn/easy-rsa/
      executable: /bin/bash


  - name: Copy crl.pem
    copy:
      remote_src: yes
      src: /etc/openvpn/easy-rsa/keys/crl.pem
      dest: /etc/openvpn/


    notify:
        - Restart openvpn@server_suse


  when: ansible_distribution == "SLES"
